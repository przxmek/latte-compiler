module SkelLatte where

-- Haskell module generated by the BNF converter

import AbsLatte
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Program topdefs -> failure x
transTopDef :: TopDef -> Result
transTopDef x = case x of
  TopDefFunc funcdef -> failure x
  TopDefClass classhead memberdecls -> failure x
transFuncDef :: FuncDef -> Result
transFuncDef x = case x of
  FuncDef type_ ident fargs block -> failure x
transFArg :: FArg -> Result
transFArg x = case x of
  FArg type_ ident -> failure x
transClassHead :: ClassHead -> Result
transClassHead x = case x of
  ClassHeadDef ident -> failure x
  ClassHeadExtDef ident classtype -> failure x
transMemberDecl :: MemberDecl -> Result
transMemberDecl x = case x of
  DeclField type_ idents -> failure x
  FuncField funcdef -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  Block stmts -> failure x
transStmt :: Stmt -> Result
transStmt x = case x of
  SEmpty -> failure x
  SBlStmt block -> failure x
  SDecl type_ items -> failure x
  SAss expr1 expr2 -> failure x
  SIncr expr -> failure x
  SDecr expr -> failure x
  SRet expr -> failure x
  SVRet -> failure x
  SCond expr stmt -> failure x
  SCondElse expr stmt1 stmt2 -> failure x
  SWhile expr stmt -> failure x
  SFor type_ ident expr stmt -> failure x
  SExp expr -> failure x
transItem :: Item -> Result
transItem x = case x of
  NoInit ident -> failure x
  Init ident expr -> failure x
transType :: Type -> Result
transType x = case x of
  BaseTypeDef basetype -> failure x
  ArrayTypeDef arraytype -> failure x
  ClassTypeDef classtype -> failure x
transBaseType :: BaseType -> Result
transBaseType x = case x of
  TInt -> failure x
  TStr -> failure x
  TBool -> failure x
  TVoid -> failure x
transArrayType :: ArrayType -> Result
transArrayType x = case x of
  TArray type_ -> failure x
transClassType :: ClassType -> Result
transClassType x = case x of
  TClass ident -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  EVar ident -> failure x
  ELitInt integer -> failure x
  ELitTrue -> failure x
  ELitFalse -> failure x
  EString string -> failure x
  ENewClass classtype -> failure x
  ENewArray type_ expr -> failure x
  EApp expr exprs -> failure x
  EArrSub expr1 expr2 -> failure x
  EMember expr ident -> failure x
  Neg expr -> failure x
  Not expr -> failure x
  EMul expr1 mulop expr2 -> failure x
  EAdd expr1 addop expr2 -> failure x
  ERel expr1 relop expr2 -> failure x
  EAnd expr1 expr2 -> failure x
  EOr expr1 expr2 -> failure x
transAddOp :: AddOp -> Result
transAddOp x = case x of
  OpPlus -> failure x
  OpMinus -> failure x
transMulOp :: MulOp -> Result
transMulOp x = case x of
  OpTimes -> failure x
  OpDiv -> failure x
  OpMod -> failure x
transRelOp :: RelOp -> Result
transRelOp x = case x of
  OpLTH -> failure x
  OpLE -> failure x
  OpGTH -> failure x
  OpGE -> failure x
  OpEQU -> failure x
  OpNE -> failure x

