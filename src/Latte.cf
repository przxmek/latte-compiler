-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

TopDefFunc.   TopDef  ::= FuncDef ;
TopDefClass.  TopDef  ::= ClassHead "{" [MemberDecl] "}" ;  -- extension (objects)
separator nonempty TopDef "" ;

FuncDef.   FuncDef ::= Type Ident "(" [FArg] ")" Block ;

FArg.       FArg ::= Type Ident ;
separator   FArg "," ;


-- classes - extension (objects) ---------------------------

ClassHeadDef.    ClassHead ::= "class" Ident ;
ClassHeadExtDef. ClassHead ::= "class" Ident "extends" ClassType ;

DeclField.  MemberDecl ::= Type [Ident] ";" ;
FuncField.  MemberDecl ::= FuncDef ;
separator MemberDecl "" ;
separator nonempty Ident "," ;


-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;
SEmpty.    Stmt ::= ";" ;
SBlStmt.   Stmt ::= Block ;
SDecl.     Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= Ident ;
Init.      Item ::= Ident "=" Expr ;
separator nonempty Item "," ;

SAss.       Stmt ::= Expr "=" Expr  ";" ; -- extension
SIncr.      Stmt ::= Expr "++"  ";" ; -- extension
SDecr.      Stmt ::= Expr "--"  ";" ; -- extension
SRet.       Stmt ::= "return" Expr ";" ;
SVRet.      Stmt ::= "return" ";" ;
SCond.      Stmt ::= "if" "(" Expr ")" Stmt  ;
SCondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;
SWhile.     Stmt ::= "while" "(" Expr ")" Stmt ;
SFor.       Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt ; -- extension (for loop)
SExp.       Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

BaseTypeDef.   Type ::= BaseType ;
ArrayTypeDef.  Type ::= ArrayType ;
ClassTypeDef.  Type ::= ClassType ;
separator  Type "," ;

TInt.       BaseType ::= "int" ;
TStr.       BaseType ::= "string" ;
TBool.      BaseType ::= "boolean" ;
TVoid.      BaseType ::= "void" ;

TArray.     ArrayType ::= Type "[]" ; -- extension (arrays)

TClass.     ClassType ::= Ident ; -- extension (objects)


-- Expressions ---------------------------------------------


EVar.      Expr8 ::= Ident ;
ELitInt.   Expr8 ::= Integer ;
ELitTrue.  Expr8 ::= "true" ;
ELitFalse. Expr8 ::= "false" ;
ENewClass. Expr7 ::= "new" ClassType ;         -- extension (objects)
ENewArray. Expr7 ::= "new" Type "[" Expr "]" ; -- extension (arrays)
EApp.      Expr6 ::= Ident "(" [Expr] ")" ;
EArrSub.   Expr6 ::= Ident "[" [Expr] "]" ;    -- extension (arrays)
EMember.   Expr6 ::= Expr6 "." Ident ;         -- extension (objects)
EString.   Expr6 ::= String ;
Neg.       Expr5 ::= "-" Expr6 ;
Not.       Expr5 ::= "!" Expr6 ;
EMul.      Expr4 ::= Expr4 MulOp Expr5 ;
EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;
ERel.      Expr2 ::= Expr2 RelOp Expr3 ;
EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;
EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 8 ;
separator  Expr "," ;


-- operators -----------------------------------------------

OpPlus.      AddOp ::= "+" ;
OpMinus.     AddOp ::= "-" ;
OpTimes.     MulOp ::= "*" ;
OpDiv.       MulOp ::= "/" ;
OpMod.       MulOp ::= "%" ;
OpLTH.       RelOp ::= "<" ;
OpLE.        RelOp ::= "<=" ;
OpGTH.       RelOp ::= ">" ;
OpGE.        RelOp ::= ">=" ;
OpEQU.       RelOp ::= "==" ;
OpNE.        RelOp ::= "!=" ;


-- comments ------------------------------------------------

comment    "#" ;
comment    "//" ;
comment    "/*" "*/" ;
